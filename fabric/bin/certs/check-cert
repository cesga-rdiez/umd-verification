#!/bin/bash
set -e

# how many days to warn before expiration
DAYS=7

if [ $# -lt 1 ]; then
    echo usage: `basename $0` cert_file
    exit 1
fi

# does the file contain a valid certificate
cert=$1
if ! openssl x509 -in $cert &> /dev/null; then
    echo Error reading certificate file: $cert
    exit 2
fi

# get interesting fields
subject=$(openssl x509 -in $cert -noout -subject | cut -d= -f2-)
start=$(openssl x509 -in $cert -noout -startdate | cut -d= -f2-)
end=$(openssl x509 -in $cert -noout -enddate | cut -d= -f2-)

echo "Subject: $subject"
echo "Valid from: $start"
echo "Valid until: $end"

# convert to UTC seconds since epoch
now_s=$(date --universal +%s)
start_s=$(date --universal --date="$start" +%s)
end_s=$(date --universal --date="$end" +%s)
warn_s=$((end_s - DAYS * 24 * 60 * 60))
left_s=$((end_s - now_s))
left_d=$((left_s / 60 / 60 / 24))

# check validity
if [ $((start_s > now_s)) == "1" ]; then
    echo "Certificate not valid yet."
    echo "summary: Certificate not valid yet."
    ret=$SAME_ERROR
elif [ $((now_s >= end_s)) == "1" ]; then
    echo "Certificate expired."
    echo "summary: Certificate expired."
    ret=$SAME_ERROR
elif [ $((now_s >= warn_s)) == "1" ]; then
    echo "Certificate expiring soon: only $left_d days left."
    echo "summary: Certificate expiring soon: only $left_d days left."
    ret=$SAME_WARNING
else
    echo "Certificate valid for $left_d more days."
    echo "summary: Certificate valid for $left_d more days."
    ret=$SAME_OK
fi

exit $ret

# vim:ts=4:et:sw=4
